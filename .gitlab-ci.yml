variables:
  IMAGE_OPENJDK_GRADLE: gradle:8.3.0-jdk17-alpine

# Prevents you having two pipelines for every merge request.
# workflow:
#   rules:
#     - if: $CI_MERGE_REQUEST_ID
#       when: never
#     - when: always

stages:
  # - clean
  - build
  - test
  - create
  # - build-image
  # - publish-image
  # - deploy

# clean:
#   image: $IMAGE_OPENJDK_GRADLE
#   stage: clean
#   script:
#     - echo "Cleaning leftovers from previous builds"
#     - sh $CI_PROJECT_DIR/gradlew clean

build:
  image: $IMAGE_OPENJDK_GRADLE
  stage: build
  when: manual
  script:
    - echo "Compiling the code..."
    - sh $CI_PROJECT_DIR/gradlew openApiGenerate
    - sh $CI_PROJECT_DIR/gradlew build
  # artifacts:
  #   paths:
  #     - build/libs/blog-*.war

test:
  image: $IMAGE_OPENJDK_GRADLE
  stage: test
  when: manual
  script:
    - echo "Running tests..."
    - sh $CI_PROJECT_DIR/gradlew openApiGenerate
    - sh $CI_PROJECT_DIR/gradlew test

create:
  image: $IMAGE_OPENJDK_GRADLE
  stage: create
  when: manual
  script:
    - echo "Creating dependencies..."
    - sh apt-get update
    - sh apt-get install curl
    - sh curl -fsSL https://get.docker.com/ | sh
    - sh docker info
    # - echo "Creating artifacts..."
    # - sh $CI_PROJECT_DIR/gradlew openApiGenerate
    # - sh $CI_PROJECT_DIR/gradlew build
    # - sh $CI_PROJECT_DIR/gradlew bootBuildImage
    # - sh docker image list
# unit-test:
#   image: $IMAGE_OPENJDK_GRADLE
#   stage: test
#   script:
#     - echo "Running unit tests..."
#     - sh $CI_PROJECT_DIR/gradlew test -Dspring.profiles.active=test

# coverage-test:
#   image: $IMAGE_OPENJDK_GRADLE
#   stage: test
#   needs:
#     - job: unit-test
#   script:
#     - echo "Running coverage tests..."

# build-image:
#   stage: build-image
#   script:
#     - echo "Building Docker Image..."
#     - docker build -t $CI_REGISTRY/mjovanc/blog-api:$CI_COMMIT_SHORT_SHA .
#     - docker build -t $CI_REGISTRY/mjovanc/blog-api:latest .

# publish-image:
#   stage: publish-image
#   script:
#     - echo "Publishing Docker Image..."
#     - docker login -u mjovanc -p $MJOVANC_CONTAINER_REGISTRY_TOKEN $CI_REGISTRY
#     - docker push $CI_REGISTRY/mjovanc/blog-api:$CI_COMMIT_SHORT_SHA
#     - docker push $CI_REGISTRY/mjovanc/blog-api:latest

# Alternative down stream pipeline to be triggered
#deploy:
#  stage: deploy
#  trigger: mjovanc/blog-iac
