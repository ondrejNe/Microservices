[versions]
# Kotlin
kotlin = "1.9.10"
# Java
java = "17"
# Spring
kotlinSpring = "1.9.10"
springframework = "3.1.3"
springDependencyManagement = "1.1.3"
# Open API
openapiTools = "6.6.0"
springDoc = "1.7.0"
swagger = "2.2.15"
javaxValidation = "2.0.1.Final"
javaxServlet = "4.0.1"
# Redis
kredsLib = "0.9.0"
# Logging
slf4j = "2.0.7"
# Testing
mockito = "4.9.0"
mockitoKotlin = "4.0.0"
mockitoJunitJupiter = "4.9.0"

[libraries]
# Kotlin
kotlinCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core" }
kotlinCoroutinesJdk8 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8" }
kotlinCoroutinesMdc = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j" }
kotlinReflections = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
# Logging

# Testing
junitJupiterApi = { module = "org.junit.jupiter:junit-jupiter-api" }
junitJupiterEngine = { module = "org.junit.jupiter:junit-jupiter-engine" }
junitJupiterParams = { module = "org.junit.jupiter:junit-jupiter-params" }
mockitoCore = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockitoInline = { module = "org.mockito:mockito-inline", version.ref = "mockito" }
mockitoKotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockitoKotlin" }
mockitoJunitJupiter = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockitoJunitJupiter" }
assertJ = { module = "org.assertj:assertj-core" }
kotlinCoroutineTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test" }
# Spring
jettyWebSocketClient = { module = "org.eclipse.jetty.websocket:websocket-client" }
jettyJavaxWebSocketClientImpl = { module = "org.eclipse.jetty.websocket:javax-websocket-client-impl" }
springBootStarterWeb = { module = "org.springframework.boot:spring-boot-starter-web" }
springBootStarterValidation = { module = "org.springframework.boot:spring-boot-starter-validation" }
springBootActuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
springBootDataRest = { module = "org.springframework.boot:spring-boot-starter-data-rest" }
springBootJacksonKotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin" }
springBootKotlinStdLib = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8" }
springBootStarterSecurity = { module = "org.springframework.boot:spring-boot-starter-security" }
springBootStarterResourceServer = { module = "org.springframework.boot:spring-boot-starter-oauth2-resource-server" }
# OpenAPI
swaggerAnnotations = { module = "io.swagger.core.v3:swagger-annotations", version.ref = "swagger" }
swaggerModels = { module = "io.swagger.core.v3:swagger-models", version.ref = "swagger" }
springDocOpenApi = { module = "org.springdoc:springdoc-openapi-ui", version.ref = "springDoc" }
javaxValidationApi = { module = "javax.validation:validation-api", version.ref = "javaxValidation" }
javaxServletApi = { module = "javax.servlet:javax.servlet-api", version.ref = "javaxServlet" }
# Redis
kreds = { module = "io.github.crackthecodeabhi:kreds", version.ref = "kredsLib" }
# Logging
slf4jApi = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
[plugins]
# Open API
openapiGenerator = {id = "org.openapi.generator", version.ref = "openapiTools" }
# Spring
springBootPlugin = {id = "org.springframework.boot", version.ref = "springframework" }
springDependencyManagementPlugin = {id = "io.spring.dependency-management", version.ref = "springDependencyManagement" }
